name: Stage 1 - CI Pipeline & Testing Branch

on:
    # Trigger the workflow on pushes and pull requests to the 'testing' branch
    push:
        branches: [testing]
    pull_request:
        branches: [testing]

# Define global environment variables that can be used across jobs
env:
    # Azure Container Registry login server, set as a GitHub Secret for security
    ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
    # Image tag using the commit SHA and run ID for uniqueness
    IMAGE_TAG: ${{ github.sha }}-${{ github.run_id }}

jobs:
    # Job 1: Test and Lint Backend Services
    Test_Backend_Services:
        runs-on: ubuntu-latest

        services:
            # Product DB container
            product_db:
                image: postgres:15
                env:
                    POSTGRES_USER: postgres
                    POSTGRES_PASSWORD: postgres
                    POSTGRES_DB: products

                options: >-
                    --health-cmd "pg_isready -U postgres"
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
                ports:
                    - 5432:5432

            # Order DB
            order_db:
                image: postgres:15
                env:
                    POSTGRES_USER: postgres
                    POSTGRES_PASSWORD: postgres
                    POSTGRES_DB: orders
                ports:
                    - 5433:5432
                options: >-
                    --health-cmd "pg_isready -U postgres"
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5

            # Customer DB - Added this missing service
            customer_db:
                image: postgres:15
                env:
                    POSTGRES_USER: postgres
                    POSTGRES_PASSWORD: postgres
                    POSTGRES_DB: customers
                ports:
                    - 5434:5432
                options: >-
                    --health-cmd "pg_isready -U postgres"
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up environment
              uses: actions/setup-python@v5
              with:
                  python-version: "3.10"

            - name: Install dependencies
              run: |
                  cd k8s/
                  ls 
                  cd ..
                  pip install --upgrade pip
                  # Loop through each backend service folder
                  for req in backend/*/requirements.txt; do
                    echo "Installing $req"
                    pip install -r "$req"
                  done
                  # Install CI tools
                  pip install pytest httpx
                  

            # - name: Run product_service tests
            #   working-directory: backend/product_service
            #   env:
            #       POSTGRES_HOST: localhost
            #       POSTGRES_PORT: 5432
            #       POSTGRES_DB: products
            #       POSTGRES_USER: postgres
            #       POSTGRES_PASSWORD: postgres
            #   run: |
            #       pytest tests --maxfail=1 --disable-warnings -q

            # - name: Run order_service tests
            #   working-directory: backend/order_service
            #   env:
            #       POSTGRES_HOST: localhost
            #       POSTGRES_PORT: 5433
            #       POSTGRES_DB: orders
            #       POSTGRES_USER: postgres
            #       POSTGRES_PASSWORD: postgres
            #   run: |
            #       pytest tests --maxfail=1 --disable-warnings -q


            # - name: Run customer_service tests
            #   working-directory: backend/customer_service
            #   env:
            #       POSTGRES_HOST: localhost
            #       POSTGRES_PORT: 5434
            #       POSTGRES_DB: customers
            #       POSTGRES_USER: postgres
            #       POSTGRES_PASSWORD: postgres
            #   run: |
            #       pytest tests --maxfail=1 --disable-warnings -q

    Build_and_Push_Docker_Images_to_ACR:
 
        runs-on: ubuntu-latest
        needs: Test_Backend_Services

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            # Azure login using a Service Principal secret
            - name: Azure Login
              uses: azure/login@v1
              with:
                  creds: ${{ secrets.AZURE_CREDENTIALS }} # Needs to be set as a GitHub Secret (Service Principal JSON)

            #Login to Azure Container Registry (ACR)
            - name: Login to Azure Container Registry
              run: az acr login --name ${{ env.ACR_LOGIN_SERVER }}
              

            # # Build and Push Docker image for Frontend
            # - name: Build and Push Frontend Image
            #   run: |
            #     docker build -t ${{ env.ACR_LOGIN_SERVER }}/frontend:latest ./frontend/
            #     docker push ${{ env.ACR_LOGIN_SERVER }}/frontend:latest

            # # Build and Push Docker image for Product Service
            # - name: Build and Push Product Service Image
            #   run: |
            #       docker build -t ${{ env.ACR_LOGIN_SERVER }}/product_service:latest ./backend/product_service/
            #       docker push ${{ env.ACR_LOGIN_SERVER }}/product_service:latest

            # # Build and Push Docker image for Order Service
            # - name: Build and Push Order Service Image
            #   run: |
            #       docker build -t ${{ env.ACR_LOGIN_SERVER }}/order_service:latest ./backend/order_service/
            #       docker push ${{ env.ACR_LOGIN_SERVER }}/order_service:latest

            # # Build and Push Docker image for Customer Service
            # - name: Build and Push Customer Service Image
            #   run: |
            #       docker build -t ${{ env.ACR_LOGIN_SERVER }}/customer_service:latest ./backend/customer_service/
            #       docker push ${{ env.ACR_LOGIN_SERVER }}/customer_service:latest

            #Logout from Azure for security (runs even if image push fails)
            - name: Logout from Azure
              run: az logout
              if: always()

    staging_deployment:

        needs: [Test_Backend_Services, Build_and_Push_Docker_Images_to_ACR]
        uses: ./.github/workflows/staging.yml
        secrets: inherit
