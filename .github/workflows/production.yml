name: Deploy to Production 

# Trigger the workflow on pushes to the 'main' branch
# You can also add 'pull_request:' to run on PRs test
# changes for development
on:
  # Manual trigger
  workflow_dispatch:

  push:
    branches:
      - main # Push to main runs everything
    paths:
      - 'backend/**'
      - '.github/workflows/backend_ci.yml'
  pull_request:
    branches: # Runs on PRs targeting these branches
      - main
    types: [opened, synchronize, reopened]
    paths:
      - 'backend/**'
      - '.github/workflows/backend_ci.yml'


      
# Define global environment variables that can be used across jobs
env:
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
  # Use image tag from Stage 1 trigger or manual input
  IMAGE_TAG: ${{ github.event.client_payload.image_tag || github.event.inputs.image_tag || 'latest' }}
  # Create unique production environment names
  STAGING_RG: week10rudra-rg
  STAGING_AKS: week10rudra-aks

jobs:

  deploy_to_production:
    runs-on: ubuntu-latest
    environment: Production
    
    outputs:
      PRODUCT_API_IP: ${{ steps.get_product_ip.outputs.external_ip }}
      ORDER_API_IP: ${{ steps.get_order_ip.outputs.external_ip }}
      CUSTOMER_API_IP: ${{ steps.get_customer_ip.outputs.external_ip }}
      staging-rg: ${{ env.STAGING_RG }}
      staging-aks: ${{ env.STAGING_AKS }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - name: Set Kubernetes context (get AKS credentials)
        run: |
          az aks get-credentials --resource-group ${{ inputs.aks_resource_group }} --name ${{ inputs.aks_cluster_name }} --overwrite-existing

      - name: Attach ACR
        run: |
          az aks update --name ${{ inputs.aks_cluster_name }} --resource-group ${{ inputs.aks_resource_group }} --attach-acr ${{ inputs.aks_acr_name }}

      - name: Deploy Backend Infrastructure (Namespace, ConfigMaps, Secrets, Databases)
        run: |
          echo "Deploying backend infrastructure..."
          cd k8s/
          kubectl apply -f configmaps.yaml
          kubectl apply -f secrets.yaml
          kubectl apply -f product-db.yaml
          kubectl apply -f order-db.yaml
          kubectl apply -f customer-db.yaml

      - name: Deploy Backend Microservices (Product, Order)
        run: |
          echo "Deploying backend microservices..."
          cd k8s/
          kubectl apply -f product-service.yaml
          kubectl apply -f order-service.yaml
          kubectl apply -f customer-service.yaml
      
      - name: Wait for Backend LoadBalancer IPs
        run: |
          echo "Waiting for Product, Order LoadBalancer IPs to be assigned (up to 5 minutes)..."
          PRODUCT_IP=""
          ORDER_IP=""
          
          for i in $(seq 1 60); do
            echo "Attempt $i/60 to get IPs..."
            PRODUCT_IP=$(kubectl get service product-service-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            ORDER_IP=$(kubectl get service order-service-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            CUSTOMER_IP=$(kubectl get service customer-service-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}')

            if [[ -n "$PRODUCT_IP" && -n "$ORDER_IP" && -n "$CUSTOMER_IP" ]]; then
              echo "All backend LoadBalancer IPs assigned!"
              echo "Product Service IP: $PRODUCT_IP"
              echo "Order Service IP: $ORDER_IP"
              break
            fi
            sleep 5 # Wait 5 seconds before next attempt
          done
          
          if [[ -z "$PRODUCT_IP" || -z "$ORDER_IP" || -z "$CUSTOMER_IP" ]]; then
            echo "Error: One or more LoadBalancer IPs not assigned after timeout."
            exit 1 # Fail the job if IPs are not obtained
          fi
          
          # These are environment variables for subsequent steps in the *same job*
          # And used to set the job outputs
          echo "PRODUCT_IP=$PRODUCT_IP" >> $GITHUB_ENV
          echo "ORDER_IP=$ORDER_IP" >> $GITHUB_ENV
          echo "CUSTOMER_IP=$CUSTOMER_IP" >> $GITHUB_ENV

      - name: Capture Product Service IP for Workflow Output
        id: get_product_ip
        run: echo "external_ip=${{ env.PRODUCT_IP }}" >> $GITHUB_OUTPUT
      
      - name: Capture Order Service IP for Workflow Output
        id: get_order_ip
        run: echo "external_ip=${{ env.ORDER_IP }}" >> $GITHUB_OUTPUT

      - name: Capture Customer Service IP for Workflow Output
        id: get_customer_ip
        run: echo "external_ip=${{ env.CUSTOMER_IP }}" >> $GITHUB_OUTPUT

      - name: Logout from Azure
        run: az logout


  deploy_frontend:
    needs: [deploy_to_production]
    uses: ./.github/workflows/frontend-cd.yml
    with:
      aks_cluster_name: ${{ needs.deploy_to_production.outputs.staging-aks }}
      aks_resource_group: ${{ needs.deploy_to_production.outputs.staging-rg }}
      product_api_ip: ${{ needs.deploy_to_production.outputs.product_api_ip }}
      order_api_ip: ${{ needs.deploy_to_production.outputs.order_api_ip }}
      customer_api_ip: ${{ needs.deploy_to_production.outputs.customer_api_ip }}