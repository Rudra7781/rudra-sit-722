name: Stage 2 - Staging Deployment Pipeline

on:
  # Manual trigger for testing purposes  2
  workflow_dispatch:

  workflow_call:



env:
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
  # Use image tag from Stage 1 trigger or manual input
  IMAGE_TAG: ${{ github.event.client_payload.image_tag || github.event.inputs.image_tag || 'latest' }}
  # Create unique staging environment names
  STAGING_RG: week10rudra-rg
  # STAGING_AKS: aks-staging-${{ github.event.client_payload.run_id || github.run_id }}
  STAGING_AKS: week10rudra-aks
jobs:
  # Job 1: Create Staging Infrastructure
  create_staging_infrastructure:
    runs-on: ubuntu-latest
    
    outputs:
      staging-rg: ${{ env.STAGING_RG }}
      staging-aks: ${{ env.STAGING_AKS }}
      image-tag: latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Display Trigger Information
        run: |
          echo " Stage 2 Pipeline Triggered"
          echo "Image Tag: latest"
          echo "Staging Resource Group: ${{ env.STAGING_RG }}"
          echo "Staging AKS Cluster: ${{ env.STAGING_AKS }}"


      # - name: Azure Login
      #   uses: azure/login@v1
      #   with:
      #     creds: ${{ secrets.AZURE_CREDENTIALS }}


      # - name: Create Staging AKS Cluster
      #   run: |
      #     echo " Creating staging AKS cluster..."
          # az aks create \
          #   --resource-group ${{ env.STAGING_RG }} \
          #   --name ${{ env.STAGING_AKS }} \
          #   --node-count 1 \
          #   --node-vm-size Standard_B2s \
          #   --generate-ssh-keys \
          #   --attach-acr ${{ secrets.AZURE_CONTAINER_REGISTRY }} \
          #   --tags Environment=Staging Purpose=Testing AutoDelete=true

      # - name: Get AKS Credentials
      #   run: |
      #     az aks get-credentials \
      #       --resource-group ${{ env.STAGING_RG }} \
      #       --name ${{ env.STAGING_AKS }} \
      #       --overwrite-existing

      # - name: Verify Cluster Connection
      #   run: |
      #     echo " Verifying cluster connectivity..."
      #     kubectl get nodes
      #     kubectl cluster-info
                    
      # - name: Logout from Azure
      #   run: az logout
      #   if: always()

  #Job 2: Deploy Applications to Staging
  deploy_to_staging:
    runs-on: ubuntu-latest
    needs: create_staging_infrastructure
    if: success()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4


      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}



      - name: Get AKS Credentials
        run: |
          az aks get-credentials \
            --resource-group ${{ env.STAGING_RG }} \
            --name ${{ env.STAGING_AKS }} \
            --overwrite-existing

      - name: Create Kubernetes Namespace
        run: |
          echo " Setting up staging namespace..."
          kubectl create namespace staging --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy Backend Infrastructure (Namespace, ConfigMaps, Secrets, Databases)
        run: |
          echo "Deploying backend infrastructure..."
          cd k8s/
          kubectl apply -f configmaps.yaml -n staging
          kubectl apply -f secrets.yaml -n staging
          kubectl apply -f product-db.yaml -n staging
          kubectl apply -f order-db.yaml -n staging
          kubectl apply -f customer-db.yaml -n staging
        
      - name: Wait for Databases to be Ready
        run: |
          echo " Waiting for databases to be ready..."
          kubectl wait --for=condition=available --timeout=300s deployment/product-db-deployment-w08e1 -n staging
          kubectl wait --for=condition=available --timeout=300s deployment/order-db-deployment-w08e1 -n staging
          kubectl wait --for=condition=available --timeout=300s deployment/customer-db-deployment-w08e1 -n staging
          echo " Databases are ready!"

      - name: Deploy Backend Microservices (Product, Order)
        run: |
          echo "Deploying backend microservices..."
          cd k8s/
          kubectl apply -f product-service.yaml -n staging
          kubectl apply -f order-service.yaml -n staging
          kubectl apply -f customer-service.yaml -n staging


      - name: Wait for Application Services to be Ready
        run: |
          echo " Waiting for application services to be ready..."
          kubectl wait --for=condition=available --timeout=60s deployment/product-service-w08e1 -n staging
          kubectl wait --for=condition=available --timeout=60s deployment/order-service-w08e1 -n staging
          kubectl wait --for=condition=available --timeout=60s deployment/customer-service-w08e1 -n staging
          echo " Application services are ready!"

      - name: Get Staging Environment URLs
        run: |
          echo " Retrieving staging environment URLs..."
          kubectl get services -n staging
          
          # Wait for external IPs with timeout
          echo " Waiting for LoadBalancer external IPs..."
          timeout 10 bash -c '
          while [[ $(kubectl get svc product-service-w08e1 -n staging -o jsonpath="{.status.loadBalancer.ingress[0].ip}" 2>/dev/null) == "" ]]; do
            echo "Waiting for product-service-w08e1 external IP..."
            sleep 15
          done
          while [[ $(kubectl get svc order-service-w08e1 -n staging -o jsonpath="{.status.loadBalancer.ingress[0].ip}" 2>/dev/null) == "" ]]; do
            echo "Waiting for order-service-w08e1 external IP..."
            sleep 15
          done
          while [[ $(kubectl get svc customer-service-w08e1 -n staging -o jsonpath="{.status.loadBalancer.ingress[0].ip}" 2>/dev/null) == "" ]]; do
            echo "Waiting for customer-service-w08e1 external IP..."
            sleep 15
          done
          ' || echo "  LoadBalancer IPs may take additional time to provision"

    
          echo " STAGING ENVIRONMENT DEPLOYED SUCCESSFULLY!"
                     
      - name: Logout from Azure
        run: az logout
        if: always()

  # Job 3: Run Staging Tests
  run_staging_tests:
    runs-on: ubuntu-latest
    needs: deploy_to_staging
    if: success()

    outputs:
      product_api_ip: ${{ steps.get_product_ip.outputs.external_ip }}
      order_api_ip: ${{ steps.get_order_ip.outputs.external_ip }}
      customer_api_ip: ${{ steps.get_customer_ip.outputs.external_ip }}


    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          # enable-AzPSSession: true

      - name: Get AKS Credentials
        run: |
          az aks get-credentials \
            --resource-group ${{ env.STAGING_RG }} \
            --name ${{ env.STAGING_AKS }} \
            --overwrite-existing

      - name: Get Service IPs
        id: get_ips
        run: |
          PRODUCT_SERVICE_IP=$(kubectl get svc product-service-w08e1 -n staging -o jsonpath="{.status.loadBalancer.ingress[0].ip}")
          ORDER_SERVICE_IP=$(kubectl get svc order-service-w08e1 -n staging -o jsonpath="{.status.loadBalancer.ingress[0].ip}")
          CUSTOMER_SERVICE_IP=$(kubectl get svc customer-service-w08e1 -n staging -o jsonpath="{.status.loadBalancer.ingress[0].ip}") 
          
          echo "product_ip=$PRODUCT_SERVICE_IP" >> $GITHUB_ENV
          echo "order_ip=$ORDER_SERVICE_IP" >> $GITHUB_ENV
          echo "customer_ip=$CUSTOMER_SERVICE_IP" >> $GITHUB_ENV
          
          echo "product_ip=$PRODUCT_SERVICE_IP" >> $GITHUB_OUTPUT
          echo "order_ip=$ORDER_SERVICE_IP" >> $GITHUB_OUTPUT
          echo "customer_ip=$CUSTOMER_SERVICE_IP" >> $GITHUB_OUTPUT

          echo "Product Service IP: $PRODUCT_SERVICE_IP"
          echo "Order Service IP: $ORDER_SERVICE_IP"
          echo "Customer Service IP: $CUSTOMER_SERVICE_IP"


      - name: Run Simple Acceptance Tests
        run: |
          echo " Running acceptance tests..."
          
          PRODUCT_IP=${{ steps.get_ips.outputs.product_ip }}
          ORDER_IP=${{ steps.get_ips.outputs.order_ip }}
          CUSTOMER_IP=${{ steps.get_ips.outputs.customer_ip }}

          
          # Test Product Service API endpoints
          echo "Testing Product Service APIs..."
          
          # Get products (should return empty list initially)
          echo "  - Testing GET /products"
          curl -f -v -s "http://$PRODUCT_IP:8000/products" || exit 1
          
          # Test Order Service API endpoints
          echo "Testing Order Service APIs..."
          
          # Get orders (should return empty list initially)
          echo "  - Testing GET /orders"  
          curl -f -v -s "http://$ORDER_IP:8001/orders" || exit 1

          # Test Customer Service API endpoints
          echo "Testing Customer Service APIs..." 

          # Get customers (should return empty list initially)
          echo "  - Testing GET /customers"  
          curl -f -v -s "http://$CUSTOMER_IP:8002/customers" || exit 1
          
          echo " All acceptance tests passed!"

      - name: Capture Product Service IP for Workflow Output
        id: get_product_ip
        run: echo "external_ip=${{ steps.get_ips.outputs.product_ip }}" >> $GITHUB_OUTPUT
      
      - name: Capture Order Service IP for Workflow Output
        id: get_order_ip
        run: echo "external_ip=${{ steps.get_ips.outputs.order_ip }}" >> $GITHUB_OUTPUT

      - name: Capture Customer Service IP for Workflow Output
        id: get_customer_ip
        run: echo "external_ip=${{ steps.get_ips.outputs.customer_ip }}" >> $GITHUB_OUTPUT
 
      - name: Logout from Azure
        run: az logout
        if: always()

  # Job 5: Destroy Staging Environment
  destroy_staging_environment:
    runs-on: ubuntu-latest
    needs: [create_staging_infrastructure, deploy_to_staging, run_staging_tests]
    if: always() && needs.create_staging_infrastructure.result == 'success'

    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS Credentials
        run: |
          az aks get-credentials \
            --resource-group ${{ env.STAGING_RG }} \
            --name ${{ env.STAGING_AKS }} \
            --overwrite-existing
          
          kubectl get svc -n staging
      # - name: Wait for manual testing
      #   run: |
      #     echo " Pausing for manual testing (5 minutes)..."
      #     sleep 120 # Sleep for 1 minutes to allow manual testing

      # - name: Cleanup Staging Environment
      #   run: |
      #     echo "CLEANING UP STAGING ENVIRONMENT"

      #     echo "Deleting all Services/Deployment in staging AKS..."
      #     # Optional: delete all deployments if you also want to remove pods
      #     kubectl delete -f k8s/ -n staging

      - name: Logout from Azure
        run: az logout
        if: always()
            
         
  